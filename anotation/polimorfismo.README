# ğŸ§  Polimorfismo com @Override em Java

> Exemplo prÃ¡tico de reutilizaÃ§Ã£o de mÃ©todos com personalizaÃ§Ã£o atravÃ©s de sobrescrita.

## ğŸ“¦ Package
`Polimorfismo`

## ğŸ“‚ Classes Envolvidas

- `Main.java`
- `User.java` (classe base)
- `DaniloUser.java` (subclasse)
- `RebecaUser.java` (subclasse)

---

## ğŸ§© DescriÃ§Ã£o

A classe `User` Ã© um molde com atributos comuns:

- `name`
- `age`
- `city`
- `TalentPerson()` â†’ mÃ©todo genÃ©rico que serÃ¡ sobrescrito

As subclasses (`DaniloUser`, `RebecaUser`) sobrescrevem o mÃ©todo `TalentPerson()` para exibir talentos personalizados, usando o conceito de **Polimorfismo** com a anotaÃ§Ã£o **@Override**.

---

## ğŸ“Œ Exemplo de Uso

### ğŸ”¹ `Main.java`

DaniloUser userOne = new DaniloUser();
userOne.name = "Danilo Mendes";
userOne.TalentPerson(); // Exibe talento especÃ­fico de Danilo

ğŸ”¹ User.java
public class User {
    public String name;
    public int age;
    public String city;

    public void TalentPerson() {
        System.out.println(name + " tem um talento especial!");
    }
}
ğŸ”¹ DaniloUser.java
public class DaniloUser extends User {
    @Override
    public void TalentPerson() {
        System.out.println(name + " tem um talento especial: uma excelente capacidade analÃ­tica!");
    }
}
ğŸ”¹ RebecaUser.java
public class RebecaUser extends User {
    @Override
    public void TalentPerson() {
        System.out.println(name + " tem um talento especial: uma criatividade fora do comum!");
    }
}
âœ… Resultado Esperado

Danilo Mendes tem um talento especial: uma excelente capacidade analÃ­tica!
Rebeca Pereira tem um talento especial: uma criatividade fora do comum!

ğŸ§  Conceitos ReforÃ§ados

HeranÃ§a: Compartilhamento de atributos e mÃ©todos comuns.
Polimorfismo: Um mesmo mÃ©todo com comportamentos diferentes.
@Override: Sobrescreve mÃ©todos da superclasse com comportamentos especÃ­ficos.